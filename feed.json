{
  "version": "https://jsonfeed.org/version/1",
  "title": "bramaudi.dev",
  "home_page_url": "https://bramaudi.github.io/",
  "feed_url": "https://bramaudi.github.io/feed.json",
  "description": "I am person that write stuff.",
  "author": {
    "name": "Brama Udi"
  },
  "items": [
    {
      "id": "https://bramaudi.github.io/pengubah-kalender-masehi-hijriah/",
      "url": "https://bramaudi.github.io/pengubah-kalender-masehi-hijriah/",
      "title": "Pengubah Kalender Masehi Hijriah",
      "content_html": "<h2>Algoritma</h2>\n<p>Hitungan hijriah dalam pengubah tanggal masehi ke hijriah ini menggunakan API Javascript bawaan (<code>Intl.DateTimeFormat</code>) dengan menggunakan metode hitungan <code>islamic-civil</code>, referensi: https://stackoverflow.com/a/71004938.</p>\n<p>Dan tanggal yang dihasilkan pun sama dengan saat menggunakan script dari <a href=\"https://www.al-habib.info/islamic-calendar/hijricalendartext.htm\">al-habib</a> dengan penyesuaian <code>-1</code> hari.</p>\n<p>Untuk formula perhitungan pasaran berasal dari modulo 5 dari (<em>Julian Day</em> - 1), berikut cara mendapat julian day:</p>\n<pre><code class=\"language-bash\">(UNIX TIME / 86400000) + 2440587.5 === Julian Day;\n</code></pre>\n<p>Dalam kasus ini karena menggunakan Javascript maka <code>UNIX TIME</code> kita ubah menjadi <code>Date.now()</code>.</p>\n<p>Dengan urutan array pasaran sebagai berikut:</p>\n<pre><code class=\"language-js\">[&quot;Pon&quot;,&quot;Wage&quot;,&quot;Kliwon&quot;,&quot;Legi&quot;,&quot;Pahing&quot;]\n</code></pre>",
      "date_published": "2022-03-08T13:50:38Z"
    },
    {
      "id": "https://bramaudi.github.io/format-codec-audio-video-untuk-whatsapp/",
      "url": "https://bramaudi.github.io/format-codec-audio-video-untuk-whatsapp/",
      "title": "Format Codec Audio/Video Untuk Whatsapp",
      "content_html": "<p>Alasan utama mengapa saya bikin post ini karena sering kali saat saya ingin sekedar membuat <em>Story Whatsapp</em> biasanya terhalang oleh format yang tidak didukung, yah meskipun formatnya sudah MP4 namun yang saya yakin tentu &quot;codec&quot;-nya tidak didukung oleh Whatsapp, day ruined!</p>\n<p>Dulu bahkan saking gregetnya saya sampai install apk video converter untuk kebutuhan <em>story</em>, padahal paling sering cuma untuk sekedar share meme. Namun ide cemerlang baru terpikir, dengan menggunakan paket <code>ffmpeg</code> bawaan linux.</p>\n<p>Ternyata syarat untuk bisa mengirim video ke whatsapp ialah menggunakan codec sebagai berikut:</p>\n<ul>\n<li>Video: <strong>libx264</strong></li>\n<li>Audio: <strong>AAC</strong></li>\n</ul>\n<p>Untuk perintah <code>ffmpeg</code> maka jadinya seperti ini:</p>\n<pre><code class=\"language-bash\">ffmpeg -i original.mp4 -vcodec libx264 -acodec aac whatsapp.mp4\n</code></pre>\n<p>Saya coba terapkan juga untuk <code>SimpleScreenRecorder</code>[^1] juga berhasil, kini habis rekam tinggal share aja tuh XD</p>\n<p>[^1]: SimpleScreenRecorder (SSR) adalah aplikasi untuk merekam layar favorit saya yang hampir ada di semua distro linux, cek <a href=\"https://www.maartenbaert.be/simplescreenrecorder/\">website</a>-nya.</p>",
      "date_published": "2022-03-08T10:11:34Z"
    },
    {
      "id": "https://bramaudi.github.io/loop-templating-plain-javascript/",
      "url": "https://bramaudi.github.io/loop-templating-plain-javascript/",
      "title": "Loop Templating Plain Javascript",
      "content_html": "<p>Melakukan loop data pada template tanpa menggunakan framework perlu sedikit trik karena jika dengan framework tentu sudah ada mekanisme dari tiap framework itu sendiri namun jika murni javascript kita harus membuat mekanisme sendiri.</p>\n<p>Berikut ini implementasi yang sering saya gunakan, biasanya kasus penggunaan untuk pembuatan fungsi pencarian pada <em>Static Site Generator</em> karena terlalu overkill jika saya pakai framework.</p>\n<pre><code class=\"language-js\">/**\n* Loop Templating\n* @param {Array&lt;{ [key: string]: unknown }&gt;} data\n*/\nfunction maplist($el, data) {\n  const interpolationRegex = /\\[([\\w]+)\\]/g; // usage: [title]\n  const num = (item, i) =&gt; ({i, n: i+1, ...item})\n\t\n  $el._$ = $el._$ || $el.innerHTML;\n  $el.textContent = '';\n\t\n  $el.innerHTML = data.map(num).reduce((rawTemplate, obj) =&gt; {\n    return rawTemplate += $el._$.replace(\n      interpolationRegex,\n      (match, group1) =&gt; obj[group1.trim()] ?? match\n    )\n  }, '')\n}\n</code></pre>\n<p>Lihat pada <a href=\"https://gist.github.com/bramaudi/3011b94652a014667dbd5be0d36e5f63\">gist</a>.</p>\n<h2>Contoh Penggunaan</h2>\n<pre><code class=\"language-html\">&lt;div id=&quot;animelist&quot;&gt;\n  &lt;div class=&quot;user-[i]&quot;&gt;[n]. [name]&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-js\">maplist(document.getElementById('animelist'), [\n  { name: 'Attack On Titan' },\n  { name: 'Jojo Bizzare Adventure' },\n  { name: 'One Piece' },\n  { name: 'Naruto' },\n])\n</code></pre>\n<p>Hasilnya:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;animelist&quot;&gt;\n  &lt;div class=&quot;user-0&quot;&gt;1. Attack On Titan&lt;/div&gt;\n  &lt;div class=&quot;user-1&quot;&gt;2. Jojo Bizzare Adventure&lt;/div&gt;\n  &lt;div class=&quot;user-2&quot;&gt;3. One Piece&lt;/div&gt;\n  &lt;div class=&quot;user-3&quot;&gt;4. Naruto&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h2>Penjelasan</h2>\n<p>Pertama saya mendeklarasi syntax <em>interpolation</em> dengan menggunakan <em>Regex</em>:</p>\n<pre><code class=\"language-js\">const interpolationRegex = /\\[([\\w]+)\\]/g; // usage: [title]\n</code></pre>\n<p>Ini bisa kita custom jika mau, misalnya saja untuk menghindari benturan dengan template engine dari server, butuh sedikit pengetahuan tentang regex.</p>\n<p>Lalu saya juga melakukan mutasi pada array untuk menambahkan informasi index &amp; penomoran yang nantinya bisa kita akses dengan <code>[i]</code> untuk index dan <code>[n]</code> untuk penomoran:</p>\n<pre><code class=\"language-js\">const num = (item, i) =&gt; ({i, n: i+1, ...item})\n</code></pre>\n<hr>\n<p>Selanjutnya kita bahas fungsi utama tentang manipulasi DOM, pertama saat pertama kali fungsi <code>maplist</code> dimuat kita ambil <code>innerHTML</code> dari element yang bersangkutan kemudian menyimpannya didalam sebuah property didalam element itu sendiri, dalam kasus ini element adalah <code>$el</code> dan nama property-nya adalah <code>_$</code> (sebenarnya terserah namun untuk penyingkatan saja)...</p>\n<pre><code class=\"language-js\">$el._$ = $el._$ || $el.innerHTML;\n</code></pre>\n<p>...kemudian setelah string template sudah kita simpan langkah selanjutnya adalah membersihkan <em>children</em>...</p>\n<pre><code class=\"language-js\">$el.textContent = '';\n</code></pre>\n<p>...agar template mentah kita tidak tampil, atau dalam kasus lain kita juga bisa menggantinya dengan template untuk tampilan state kosong seperti &quot;<em>Daftar masih kosong</em>&quot; misalnya.</p>\n<hr>\n<p>Terakhir adalah proses <em>render</em> data dengan mengembalikan nilai <code>innerHTML</code> dari element dengan data berupa string yang telah di proses, disini saya mutasi array menggunakan fungsi <code>map</code> untuk menerapkan index &amp; penomoran dan fungsi <code>reduce</code> untuk akumulasi string hasil pemrosesan data tiap object.</p>\n<p>Ok, sebelum itu jika kalian belum tau tentang <code>reduce</code>, ini adalah fungsi bawaan yang dimiliki tipe data array yang gunanya untuk akumulasi.</p>\n<pre><code class=\"language-js\">...reduce((rawTemplate, obj) =&gt; {\n  return rawTemplate += $el._$.replace(\n    interpolationRegex,\n    (match, group1) =&gt; obj[group1.trim()] ?? match\n  )\n}, '')\n</code></pre>\n<p>Nilai awal adalah sebuah string kosong yang kemudian di tiap perulangan kita lakukan <em>replace</em> untuk mengganti syntax <em>interpolation</em> dengan nilai yang sama yang ada di object jika tidak ada maka jangan replace, dalam kode diatas jika kita debug maka variabel <code>match</code> akan berisi string &quot;[title]&quot; dan <code>group1</code> berisi &quot;title&quot;.</p>\n<p>Saya juga menggunakan operator <code>??</code> (null coalescing) agar object yang memiliki nilai 0 atau string kosong ikut ter-<em>replace</em>.</p>",
      "date_published": "2022-02-08T17:02:27Z"
    },
    {
      "id": "https://bramaudi.github.io/skyblock-terraria-mobile-1.4/",
      "url": "https://bramaudi.github.io/skyblock-terraria-mobile-1.4/",
      "title": "Skyblock Terraria Mobile 1.4",
      "content_html": "<p><img src=\"https://bramaudi.github.io/static/images/terraria-skyblock.png\" alt=\"Terraria Skyblock\"></p>\n<h2>FAQ</h2>\n<p>Apa pun yang tidak tercantum di bagian ini tidak dapat diperoleh karena berbagai alasan:</p>\n<ul>\n<li>\n<p>NPC - Guide, Merchant, Nurse, Demolitionist, Dye Trader, Zoologist,        Dryad, Painter, Arms Dealer, Clothier, Goblin Tinkerer, Tax Collector, Pirate, Wizard, Steampunker, Cyborg, Party Girl, Travelling/Skeleton Merchant</p>\n</li>\n<li>\n<p>Bosses - King Slime, Eye of Cthulhu*, Skeletron*, Wall of Flesh, The Twins, The Destroyer ,Skeletron Prime, Plantera, Golem, Empress of Light, Lunatic Cultist, Moon Lord (*cuma bisa dikalahkan sekali)</p>\n</li>\n<li>\n<p>Events - Blood Moon, Goblin Army, Slime Rain, Frost Legion, Solar Eclipse, Pirate Invasion, Martian Madness, Lunar Events</p>\n</li>\n<li>\n<p>Biomes - Forest, Corruption, Crimson, Jungle, Hallow (dan variasi Underground), Snow**<br>\n**Hanya pada sesi Natal</p>\n</li>\n</ul>\n<h2>Bagimana cara mendapat X</h2>\n<ul>\n<li><strong>Furnace</strong> - Beli di Merchant pada Jungle Biome</li>\n<li><strong>Kolam Pancing</strong> - Duplikat air dengan bucket, cari <em>iron ore</em> dengan kalahkan slime</li>\n<li><strong>Bucket</strong> - Farm slime untuk dapatkan 9 <em>iron ore</em></li>\n<li><strong>Mud</strong> - Craft dari <em>dirt</em> didekat air</li>\n<li><strong>Snow</strong> - Buka <em>presents</em> di hardmode untuk dapatkan <em>snow globe</em>, pakai event <em>frost legion</em> untuk duplikasi</li>\n<li><strong>Life Crystals</strong> - <em>1/15 drop chance</em> dari <em>gold</em> dan <em>titanium crates</em>. Disarankan mancing saat masih pre-hardmode</li>\n<li><strong>Dirt</strong> - <em>Dirt bombs</em> bisa dipakai untuk duplikat <em>dirt</em>, modal 25 bisa untung sekitar 55 <em>dirt</em></li>\n<li><strong>Bomb</strong> - Drop dari slime dengan rate sekitar 1.25%, atau bisa dibeli dari <em>skeleton merchant</em>, dan <em>demolitionist</em> kemudian</li>\n<li><strong>Grass Seed</strong> - Mancing <em>jungle crates</em> untuk dapat <em>staff of regrowth</em> atau beli dari <em>dryad</em></li>\n<li><strong>Anvil</strong> - Beli dari <em>merchant</em> atau farm slime untuk dapat <em>iron</em></li>\n<li><strong>Old Man/Devotees</strong> - Bangun jembatan hingga ujung kanan biar si mbah bisa spawn (tanpa perlu atap)</li>\n<li><strong>Dryad</strong> - Kalahkan <em>Eye of Cthulhu</em> atau <em>Skeletron</em></li>\n<li><strong>Bed</strong> - Jalan satu-satunya cuma lewat event <em>pirate invasion</em>, karena <em>cobwebs</em> tidak ada</li>\n<li><strong>Golem/Power Cells</strong> - Pulau kecil terletak dibawah pada layer <em>cavern</em> dengan <em>lihzahrd bricks/walls</em> yang sudah ada disana. Berdiri pada <em>block</em> yang telah disediakan pada <em>jungle biome</em> sudah cukup untuk spawn <em>flying snakes</em>.</li>\n<li><strong>Titanium Armour/Gear</strong> - Tidak perlu <em>forge</em> karena bisa dapat <em>titanium</em> dan <em>adamantite bars</em> dari <em>crate</em></li>\n<li><strong>Mechanical Skull/Skeletron Prime</strong> - Harus farm musuh untuk dapatkan item summon (0.04% dari drop semua musuh di hardmode)</li>\n<li><strong>Arms Dealer</strong> - <em>Boomstick</em> dari <em>jungle crates</em> atau <em>clockwork assault rifle</em>/<em>red ryder</em> dari <em>presents</em></li>\n<li><strong>Crimson/Corruption/Hallow</strong> - Transisi hardmode, <em>seeds</em> bisa dibeli dari <em>dryad</em> saat <em>bloodmoon</em>/<em>graveyard</em>, atau <em>evil seeds</em> dari <em>Eye of Cthulhu</em></li>\n</ul>\n<h2>Beberapa item kunci yang mustahil diperoleh</h2>\n<ul>\n<li><strong>Stone</strong> - Semua metode pembaruan hanya bisa jika sudah punya <em>stone</em> (Catatan: <em>stone golems</em> hanya bisa spawn diatas <em>stone</em>)</li>\n<li><strong>Sand</strong> - Semua metode pembaruan hanya bisa jika sudah punya <em>sand</em></li>\n<li><strong>Angler</strong> - Harus punya <em>sand</em> minimal 2 biji untuk bisa spawn</li>\n<li><strong>Bottles</strong> - Tidak ada <em>sand</em>, tidak ada <em>potions</em></li>\n<li><strong>Memancing di Lava</strong> - <em>Hotline Fishing Hook</em>/<em>Lavaproof Bugnet</em>/<em>Lavaproof hook</em> tidak bisa didapatkan tanpa <em>Angler</em></li>\n<li><strong>Chlorophyte Bars</strong> - Tidak bisa dapat <em>Titanium Forge</em> tanpa <em>Hellforge</em></li>\n<li><strong>Ectoplasm/Bones</strong> - Tidak ada <em>Dungeon brick</em></li>\n<li><strong>Demon Altars</strong></li>\n<li><strong>Hellforge</strong></li>\n</ul>\n<h2>Pertanyaan lainnya</h2>\n<p><strong>Saran armor terbaik?</strong> - Sebelum lawan <em>moonlord</em>, armor terbaik hanya <em>hallowed</em></p>\n<p><strong>Cara unduh/mainkan map?</strong> - Unduh world mode <a href=\"https://bramaudi.github.io/static/files/Skyblock-Expert.wld\">Expert</a> / <a href=\"https://bramaudi.github.io/static/files/Skyblock-Journey.wld\">Journey</a> lalu pindah ke...</p>\n<pre><code class=\"language-bash\">sdcard\n├── Android\n    ├── data\n        ├── com.and.games505.TerrariaPaid\n            ├── Worlds\n</code></pre>\n<p>...dan selesai.</p>\n<p><strong>Cara summon Wall Of Flesh?</strong> - Lava hanya bisa didapatkan saat membunuh lava slime (wajib mode expert+), <em>Guide Voodoo Dolls</em> dari <em>Voodoo Demons</em></p>\n<p><strong>&quot;Kenapa pohon saya lama tumbuhnya&quot;</strong> - Pohon butuh 3 blok rumput di kedua sisi untuk tumbuh, dan tanpa atap. Jika memang tidak kunjung tumbuh berarti memang belum beruntung, sabar.</p>\n<p><strong>Wall of Flesh ngebug</strong> - Bangun atap setebal 2 blok untuk menutupi <em>hell</em> agar <em>Wall of Flesh</em> tidak memanjang keatas</p>\n<p><strong>Bulb dihancurkan tapi Plantera tidak spawn</strong> - Ini karena masalah kekurangan blok <em>off-screen</em>. Coba perluas blok yang tidak terjangkau kamera/pandangan.</p>\n<p>Catatan:</p>\n<ul>\n<li>Sangat disarankan membangun jembatan sepanjang <em>world</em> untuk mencegah spawn pillar ngebug.</li>\n<li>Sebaiknya farm beberapa <em>mechanical skull</em> sebelum mengalahkan <em>skeletron prime</em>, karena sesudah itu tidak akan bisa lagi drop item summon dari musuh dan mustahil untuk summon lagi. Hanya ini <em>mech summon</em> yang tidak bisa dicraf karena tidak adanya <em>bone</em>.</li>\n<li>Belum bisa dimainkan di console.</li>\n<li>Tidak bisa dimainkan di normal mode, karena <em>lava slime</em> tidak mengeluarkan lava yang mana wajib untuk proses summon <em>Wall of Flesh</em>.</li>\n<li><em>King Slime</em> hanya bisa spawn secara alami pada blok rumput offscreen (diujung <em>world</em> dekat pantai)</li>\n<li>Jika kamu tidak suka memancing maka tidak disarankan memainkan tapi jika kamu memancing untuk <em>golden crate</em> maka trik seperti mencadangkan/memulihkan <em>world</em> akan sangat berguna untuk mendapatkan <em>life crystal</em>.</li>\n</ul>",
      "date_published": "2022-01-24T10:14:50Z"
    },
    {
      "id": "https://bramaudi.github.io/cara-symlink-pada-shared-hosting/",
      "url": "https://bramaudi.github.io/cara-symlink-pada-shared-hosting/",
      "title": "Cara Symlink pada Shared Hosting",
      "content_html": "<p>Hari ini saya mencoba deploy project Laravel ke sebuah shared hosting dengan fitur yang terbatas, apalagi tidak tersedia nya akses SSH yang mana sangat penting untuk aplikasi seperti Laravel.</p>\n<p>Beruntung kita masih bisa memakai sebuah trik untuk menjalankan perintah <strong>symlink</strong> dengan memanfaatkan fitur <strong>Cron Jobs</strong> di shared hosting, dalam kasus saya adalah CPanel, karena tidak pernah pakai Cron Jobs ini saya jadi baru tau 😂.</p>\n<p>Langkah selanjutnya Anda tinggal membuat sebuah jadwal apa saja dengan waktu yang paling singkat, pilih saja <strong>per-1 menit</strong> lalu masukkan perintah terminal misalnya saja saya akan menghubungkan <code>storage/app/public</code> ke <code>public/storage</code>.</p>\n<p>Maka ketik perintah seperti berikut:</p>\n<pre><code class=\"language-bash\">ln -s /home/&lt;username&gt;/&lt;laravel&gt;/storage/app/public /home/&lt;username&gt;/&lt;public&gt;/storage\n</code></pre>\n<p>Ganti <code>&lt;username&gt;</code> dengan nama pengguna hosting yang biasa digunakan untuk login, ganti <code>&lt;laravel&gt;</code> dengan nama folder yang menyimpan berkas pribadi laravel, dan ganti <code>&lt;public&gt;</code> dengan nama folder utama hosting, biasanya bernama <code>public_html</code>, <code>www</code>, atau <code>htdocs</code>.</p>",
      "date_published": "2021-12-04T02:42:24Z"
    },
    {
      "id": "https://bramaudi.github.io/deploy-laravel-ke-shared-hosting/",
      "url": "https://bramaudi.github.io/deploy-laravel-ke-shared-hosting/",
      "title": "Deploy Laravel ke Shared Hosting",
      "content_html": "<p>Laravel adalah salah satu Framework PHP paling populer, penggunaan Laravel sebagian besar ditangani oleh perintah bash yang Anda jalankan di terminal, itu disebut <code>artisan</code>, Anda dapat dengan mudah membuat pengontrol, model basis data, dll.</p>\n<p>Tapi bagaimana jika kita ingin men-deploy project semacam ini ke server dengan fitur terbatas seperti CPanel atau Shared Hosting? bisa sih tapi agak ribet, singkatnya kita tinggal pisahkan folder <strong>public</strong> dengan seluruh file project Laravel lalu perbaiki path di codenya, yang utama folder public diperlihatkan ke visitor dan selebihnya berada di suatu tempat yang tidak dapat diakses oleh pengunjung.</p>\n<pre><code class=\"language-bash\">MyApp\n├── app\n├── bootstrap\n├── config\n├── database\n├── public\n├── resources\n...\n</code></pre>\n<h2>Langkah - langkah</h2>\n<ol>\n<li>\n<p>Buat folder baru dengan nama apa saja, misalnya kita menggunakan <code>laravel</code> lalu pindahkan seluruh file kecuali folder <code>public</code> ke folder <code>laravel</code> yang baru saja kita buat.</p>\n</li>\n<li>\n<p>Ganti nama nama folder publik Anda agar sesuai dengan nama direktori publik server, kebanyakan bernama <code>public_html</code> dan terkadang <code>htdocs</code>.</p>\n</li>\n<li>\n<p>Buka file <code>index.php</code> di dalam folder publik kemudian perbaiki path dengan mengganti dari <code>/../</code> menjadi <code>/../laravel/</code>, perhatikan bahwa folder <code>laravel</code> adalah folder yang sama dengan yang sudah kita buat sebelumnya di Langkah 1.</p>\n</li>\n</ol>\n<p>Itu saja, sudah selesai. Jangan lupa untuk mengkonfigurasi file <code>.env</code>.</p>",
      "date_published": "2021-12-04T02:40:28Z"
    },
    {
      "id": "https://bramaudi.github.io/membuat-jquery-sendiri/",
      "url": "https://bramaudi.github.io/membuat-jquery-sendiri/",
      "title": "Membuat jQuery Sendiri",
      "content_html": "<p>Hingga saat ini JavaScript dan komunitasnya sudah sangat berkembang pesat, menjangkau pasar yang lebih luas. Saking rame-nya sekarang untuk sekedar memulai belajar saja sudah dibikin bingung oleh banyaknya framework/library Javascript yang bejibun.</p>\n<p>Saya sampe bingung dulu waktu pertama kali belajar Javascript, seperti yang kita ketahui untuk framework/library ada yang namanya React, Svelte, Vue, Angular, dan sisanya masih banyak lagi dan terus bermunculan tiap waktu.</p>\n<p>Kembali mengingat dulu yang ada dan yang saya dengar cuma jQuery aja, beliau adalah sang library legendaris yaitu <strong>jQuery</strong>, Yah memang jaman dulu setiap cari keyword tentang Javascript selalu yang muncul adalah versi jQuery-nya, bayangin yang nanya di Stackoverflow tentang vanilla js eh dijawab pake jQuery wkwk.</p>\n<p>Namun sekarang API bawaan Javascript sudah jauh berkembang, kita seharusnya sudah tidak perlu pakai jQuery lagi (kalau bisa), nah terus gimana dengan nasib project2 jaman batu apakah harus rewrite? Oh tentu saja <strong>Tidak perlu</strong>, tapi kalau mau <em>lebih bagus</em> (menurut saya) sih!</p>\n<p>Mayoritas pengguna / end-user biasanya juga tidak akan memperdulikan stack yang digunakan website tersebut bahkan saya sendiri pun juga begitu, asal gak lemot aja gak masalah sih.</p>\n<p>Berikut beberapa <strong>kelebihan</strong> dan <strong>kekurangan</strong> dalam penggunaan jQuery di 2021 kedepan yang coba saya tangkap:</p>\n<h3>Kelebihan</h3>\n<ul>\n<li>Masih banyak project yang menggunakan = Peluang cuan masih banyak</li>\n<li>Kompatibel dengan browser lama</li>\n<li>Mempermudah manipulasi DOM untuk website MPA</li>\n</ul>\n<h3>Kekurangan</h3>\n<ul>\n<li>Ketinggalan jaman, jika target market-nya adalah modern browser</li>\n<li>Ukuran lumayan dipertimbangkan secara API native sudah banyak didukung</li>\n<li>Penggunaan hanya untuk Multi Page App, meski bisa sih digabung dengan yang lain di SPA tapi ngapain?</li>\n</ul>\n<p>Jika anda  baru mulai belajar saya sarankan pelajari tentang Vanilla JS / pure javascript sebagai pondasi dasar dengan begitu kita akan lebih mudah menaklukkan banyak framework diluar sana.</p>\n<p>Saya sejak awal dulu sudah sedikit demi sedikit <a href=\"http://youmightnotneedjquery.com/\">move on dari jQuery</a> dan lebih mempelajari Vanilla JS.</p>\n<p>Oh iya, ada tips sih kalau kita ingin optimasi projek yang masih pakai jQuery untuk memangkas bundle jQuery jika target user adalah browser modern misalnya dengan menggunakan <a href=\"https://github.com/fabiospampinato/cash\">library alternatif</a> atau bahkan kita bisa rewrite sendiri kalau mau.</p>\n<h2>Membuat jQuery</h2>\n<p>Ok saya akan coba mengulik bagaimana kita bisa membuat jQuery kita sendiri yang lebih kecil ukurannya.</p>\n<h3>Selector</h3>\n<p>Alasan utama saya dulu menggunakan javascript hanya karena suka dengan sistem selektor-nya saja, hanya dengan pola <code>$(selector-css)</code> saya bisa dengan mudah untuk memanipulasi DOM.</p>\n<p>Namun saat ini sudah ada API javascript native yang fungsinya sama dengan Selector kepunyaan jQuery tadi yaitu <code>querySelector</code> dan <code>querySelectorAll</code> , dengan ini saya bisa membuat selektor jQuery hanya dengan 1 baris kode seperti ini;</p>\n<pre><code class=\"language-js\">const $ = (q) =&gt; document.querySelectorAll(q)\n</code></pre>\n<p>Perbedaan <code>querySelector</code> dan <code>querySelectorAll</code> hanya ada pada bentuk hasilnya saja yakni jika menggunakan <code>querySelectorAll</code> meski kita mencari selector id tetap akan menghasilkan array.</p>\n<pre><code class=\"language-js\">const app = $('#app')\nconsole.log(app) // hasil: NodeList [ h2#selector ]\n</code></pre>\n<h3>Helper</h3>\n<p>Lalu bagaimana dengan fungsi² lainnya semisal <code>hide()</code>, <code>addClass()</code>, <code>removeClass()</code> dan seterusnya ... ? Supaya bisa tambahin fungsi seperti ini kita rombak dulu kode sebelumnya menjadi sebuah function, sebenarnya bisa di tulis sebagai Class tapi saya akan tulis sebagai function aja ya;</p>\n<pre><code class=\"language-js\">function myjquery(selector) {\n  const elements = document.querySelectorAll(selector)\n  elements.forEach((node, index) =&gt; this[index] = node)\n  // bisa juga menggunakan for loop untuk performa lebih\n  this.length = elements.length\n}\n\nconst $ = x =&gt; new myjquery(x)\n</code></pre>\n<p>Saya mencontoh hasil return dari jQuery untuk fungsi <code>myjquery</code> diatas, jadi nanti kalau kita panggil doi dia akan return sebuah objek yang memiliki 1 properti statik yaitu <code>length</code> dan sisanya properti dinamis, seperti ini;</p>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=&quot;one&quot;&gt;Satu&lt;/li&gt;\n  &lt;li class=&quot;two&quot;&gt;Dua&lt;/li&gt;\n  &lt;li class=&quot;three&quot;&gt;Tiga&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<pre><code class=\"language-js\">console.log($('li'))\n// hasil:\n// Object { 0: li.one, 1: li.two, 2: li.three, length: 3 }\n</code></pre>\n<p>Selanjutnya kita bikin method nya, karena kita pakai gaya function bukan class jadi kita akan menggunakan <code>Function.prototype</code>.</p>\n<pre><code class=\"language-js\">function myjquery(selector) {\n  const elements = document.querySelectorAll(selector)\n  elements.forEach((node, index) =&gt; this[index] = node)\n  // bisa juga menggunakan for loop untuk performa lebih\n  this.length = elements.length\n}\n\n// tambah atribut class pada tiap elemen\nmyjquery.prototype.addClass = function(str) {\n  for (let i = 0; i &lt; this.length; i++) {\n\tthis[i].classList.add(str)\n  }\n  return this\n}\n\n// jika param kosong maka jadi getter jika tidak maka setter\nmyjquery.prototype.text = function (str = undefined) {\n  let texts = []\n  for (let i = 0; i &lt; this.length; i++) {\n    if (str) this[i].innerText = str\n    else texts.push(this[i].innerText)\n  }\n  return str ? this : texts\n}\n\nconst $ = x =&gt; new myjquery(x)\n</code></pre>\n<p>Penggunaan juga relatif mudah karena memang sangat familiar dengan syntax jQuery bahkan lebih baik, contohnya saja pada fungsi <code>text</code>, kalau di jQuery saat kita query beberapa element dan pakai method <code>text</code> ini untuk mendapatkan konten text didalam tiap element maka hasilnya adalah string yang tersambung-sambung, kalau dengan kode diatas hasilnya akan berupa array.</p>\n<p>Secara keseluruhan hanya seperti itu saja bentuk jQuery racikan sendiri, kurang sedap ya tambahin bumbu sendiri sesuai selera karena memang masih banyak method yang harus ditambahkan kalau kita mau, atau bahkan saya kepikiran ini bisa juga dibuat modular dimana kita bisa pilih mana aja yang akan dipakai jadi akan memangkas bundle lebih banyak macam three-shaking gitu lah.</p>",
      "date_published": "2021-08-20T00:00:00Z"
    }
  ]
}